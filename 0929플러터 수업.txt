0929플러터 수업
꼭 기억해야 할 내용

위젯 선택 기준

상태 변경 없음 → StatelessWidget
상태 변경 필요 → StatefulWidget
데이터 공유 필요 → InheritedWidget/Provider
라이프사이클 활용

초기화: initState()
Context 필요한 초기화: didChangeDependencies()
상태 변경: setState()
정리 작업: dispose()
레이아웃 구성 팁

Row/Column으로 기본 구조 잡기
Expanded로 유연한 공간 배분
Stack/Positioned로 겹침 효과
ListView/GridView로 스크롤 구현
성능 최적화

const 생성자 활용
불필요한 setState 최소화
적절한 위젯 타입 선택
🎯 실무 활용 팁
상태 관리: 단순한 경우 setState, 복잡한 경우 Provider/Bloc
레이아웃: 먼저 큰 구조를 잡고 세부사항 조정
애니메이션: 암시적 애니메이션으로 시작, 필요시 명시적 애니메이션
라우팅: routes 사전 정의로 체계적인 네비게이션 구성

언더바로 시작하는 함수는 내장함수
무명함수 : 함수 이름을 따로 지정 안해도 된다.
	인자에 변화처럼 코드를 넣을 수 있다.	
  Widget buildBody(){
    return Center(
      child: Container(
        padding: const EdgeInsets.only(left: 20, right: 20),
        width: 200,
        height: 50,
        color: Colors.red,
        child: Center(child: Text('Container')),
      ),
    );
  }
}
Widget buildBody2(){
  return Container(
    padding: const EdgeInsets.only(left: 20,right: 20),
    decoration: BoxDecoration(
      gradient: LinearGradient(colors : 
      [
        Color.fromARGB(255, 255, 59, 98).withOpacity(0.7),
        Color.fromARGB(200, 200, 0, 30),
      ],
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      ),
      borderRadius: BorderRadius.circular(30),
      boxShadow: [
        BoxShadow(
          color: Color.fromARGB(255, 255, 59, 98).withOpacity(0.5),
          spreadRadius: 5,
          blurRadius: 7,
          offset: Offset(0, 3),
        ),
      ],
    ),
    width: 200,
    height: 150,
    child: Center(
      child: Text('Container',style:TextStyle(color: Colors.white)),
    ),
  );
}
