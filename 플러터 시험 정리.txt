1. 플러터 소개 (6문제)
플러터가 등장한 이유는?
	• 네이티브 앱 개발(여러 프로그래밍 언어와 기술 습득 필요)
	• 플랫폼별 특화 기능 제한, 성능 이슈
	• 개발 제약이 많고, 네이티브 앱처럼 만들기 어려움
	• 자바스크립트 브릿지 사용, 성능 저하, cpu 메모리 사용량 증가
플러터의 핵심 장점 중 하나가 아닌 것은?
1.크로스 플랫폼 개발 도구 (하나의 코드로 모든 플랫폼 지원)
2. 핫 리로드와 빠른 컴파일(컴파일 시간 평균 1분 내외)
3. 구글의 적극적인 지원(구글 제작)
4. 네이티브 앱에 필적하는 퍼포먼스(skia엔진 활용 렌더링)
5. 일관된 디자인 / 플랫폼별 UI 처리(모든 ui요소 캔버스에 그리기)
6. 완성도 높은 위젯(처음으로 마지막까지 위젯으로 구성)
7. 뛰어난 디버깅(별다른 설정 없이 효율적인 디버깅 가능)
플러터는 어떤 언어로 개발되는가?
	• 다트 언어
플러터의 장점 중 하나로 올바른 것은?
플러터의 주요 특징으로 옳바른 것은?
	• 크로스 플랫폼 개발 및 단일 코드베이스(다트언어)
	• 네이티브에 가까운 고성능 ( UI 렌더링 속도가 매우 빠르고 부드럽고 높은 성능 제공)
	• 핫 리로드 기능 보유
플러터의 ‘핫 리로드(Hot Reload)’ 기능에 대한 설명으로 옳은 것은?
	•  코드를 수정했을 때 몇초반에 변경 사항을 실행 중인 앱 화면에 반영해 주는 기능
	• 극도의 빠른 피드백이 가능하며 앱 상태를 유지할 수 있는 장점이 있다.
2. 개발 환경 설정하기 (5문제)
Flutter SDK 설치 시 PATH 설정이 필요한 이유는?
	• 사용자가 운영체제의 어느 위치에서든 flutter 명령어를 쉽게 실행할 수 있도록 하기 위함
	• path환경 변수는 운영체제에게 실행파일을 찾을 위치 목록을 알려주는 역할을 함
VSCode에서 플러터 개발에 가장 필수적인 확장은?
	• Flutter 확장
flutter doctor 명령의 역할은?
	• 플러터(Flutter) 개발 환경의 상태를 진단하고, 누락되거나 잘못 설정된 구성요소를 확인하는 것 
IDE 설정에서 단축키를 활용하는 이유는?
	• 개발 속도와 효율성을 극대화하고 생산성을 높이기 위함
Flutter 프로젝트에서 필요한 패키지를 추가할 때 사용하는 파일은?
	•  pubspec.yaml 파일
3. 다트 이해하기 (10문제)
`final`과 `const`의 차이로 올바른 설명은?
final vs. const 차이점

구분	const (Compile-time Constant)	final (Runtime Constant)
불변 시점	컴파일 시점 (코드 작성 시점)	실행 시점 (최초 할당 시점)
할당 가능 값	오직 상수 값만 가능 (미리 정해진 값)	상수 또는 계산 결과 등 유동적인 값도 가능
메모리 할당	단 한 번만 할당되고 재사용됨 (메모리 효율 높음)	변수가 사용될 때마다 새롭게 할당됨
주요 용도	수학 상수, 하드 코딩된 텍스트, 위젯의	객체나 클래스의 인스턴스, 함수 호출 결과, DateTime.now()
	const 생성자
다트의 기본 자료형이 아닌 것은?
	• 숫자,문자열,논리형,배열 등이 있다
late 키워드의 역할은?
	• Late 변수는 null이 될 수 없는 변수를 나중에 초기화하겠다는 의미
다트에서 `?` 연산자는?
	• 변수의 타입 뒤에 ?를 붙여 해당 변수가 null 값을 가질 수 있도록 허용해준다.
변수를 한 번만 할당하고 변경할 수 없게 만드는 키워드는?
	• final
null 값을 허용하는 변수 타입을 나타내는 기호는?
	• 물음표 기호
아래 중 다트 함수 선언으로 올바른 것은?
	• 일반 함수, 화살표 함수(람다), 매개 변수 정의 방식
var로 선언한 변수는?
반복문이 아닌 것은?
For문, for each문 while문 do while문
OOP의 핵심 개념이 아닌 것은? 
	• OOP(Object-Oriented Programming) :객체 지향 프로그래밍의 약자
	• 4가지의 필수 개념 : 캡슐화, 상속성, 다형성,  추상화 
4. 플러터 필수 개념 이해하기 (9문제)
플러터 앱의 가장 기본 단위는?
	• 위젯
StatelessWidget의 특징은?
	• 변하지 않는 속성을 가진 위젯으로 한번 클래스를 만들면 내부 값이 변하지 않는다.
	• 일반 클래스는 값이 변할 수 있지만 stateless widget는 한번 만든 후 변경 불가능
	1. 스레드 안정성(여러 작업이 일어나도 안전)
	2. 보안(불변성으로 인한 해킹에 안전)
	3. 단순성(상태 변화가 없어 코드 유지보수가 쉽다)
	4.  예측 가능성(외부 상태 변화에 영향을 받지 않아 예측 가능한 작동)
	5.  캐싱( 상태가 고정되어 있어 안전하게 캐시할 수 있다)
StatefulWidget에서 상태를 관리하는 클래스는?
	• state클래스
위젯 트리의 루트에 위치한 것은?
	• 앱 위젯(애플리케이션의 기본설정과 구조를 정의)
Column 위젯은 어떤 방향으로 정렬하는가?
	• 세로 배치
Row 위젯의 정렬 축은?
	• 가로 배치
AnimatedContainer는 어떤 기능을 제공하는가? ※ 수업 때는 넘어갔지만 출제 합니다. 교재를 통해서 학습하세요
	• Container의 크기, 패딩, 색상 등을 시간 경과에 따라 애니메이션으로 적용할 수 있는 위젯
Navigator.push()의 역할은?
	• 새로운 화면(페이지)을 현재 화면 위에 쌓아 올리는 역할
setState() 호출의 올바른 목적은?
Statefulwidget의 상태를 변경하고 변경된 내용을 사용자 인터페이스에 반영하도록
Flutter 프레임 워크에 알리는 것